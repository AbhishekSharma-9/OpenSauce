name: PR Code Validation

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  statuses: write

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.py
            **/*.java
            **/*.cpp
            **/*.c
            **/*.js
            **/*.ts
            **/*.go
            **/*.rs
            **/*.rb
            **/*.php
            **/*.swift
            **/*.kt
            **/*.scala
            **/*.dart
            **/*.hs

      - name: Validate code quality
        id: validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const changedFiles = `${{ steps.changed.outputs.all_changed_files }}`.split(' ').filter(f => f);
            let isValid = true;

            if (changedFiles.length === 0) {
              isValid = true;
            } else {
              for (const file of changedFiles) {
                const content = fs.readFileSync(file, 'utf8');
                if (content.trim().length === 0) isValid = false;
              }
            }

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: isValid ? 'success' : 'failure',
              context: 'PR Code Validation',
              description: isValid ? '✅ Code validation passed' : '❌ Found empty or invalid file(s)'
            });
